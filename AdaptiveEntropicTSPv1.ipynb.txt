{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOx2xrpNafzY3tI7ZpKBg97",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/brianramos/bots/blob/master/AdaptiveEntropicTSPv1.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hFwNE6LGPDVJ"
      },
      "outputs": [],
      "source": [
        "import math\n",
        "import random\n",
        "import time\n",
        "import os\n",
        "import numpy as np\n",
        "from collections import defaultdict\n",
        "from scipy.spatial.distance import cdist\n",
        "\n",
        "class City:\n",
        "    def __init__(self, x, y, name=None):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "        self.name = name if name else str(id(self))\n",
        "        self.visited = False\n",
        "        self.entropy = 1.0\n",
        "\n",
        "def calculate_initial_entropies(cities, density_radius_base=20, k_nearest=5):\n",
        "    distances = cdist([[city.x, city.y] for city in cities], [[city.x, city.y] for city in cities])\n",
        "    np.fill_diagonal(distances, np.inf)\n",
        "\n",
        "    initial_entropies = {}\n",
        "    for i, city in enumerate(cities):\n",
        "        nearest_distances = np.sort(distances[i])\n",
        "        density_radius = density_radius_base * np.mean(nearest_distances[:min(k_nearest, len(nearest_distances))])\n",
        "        initial_entropies[city] = calculate_density(city, cities, density_radius, distances=distances[i]) # Pass distances here\n",
        "    return initial_entropies\n",
        "\n",
        "def calculate_density(city, cities, radius, distances=None):\n",
        "    if distances is None:  # Calculate distances if not provided\n",
        "        distances = [euclidean_distance(city, other) for other in cities if other != city]\n",
        "        count = np.sum(np.array(distances) <= radius) # Convert to numpy array for comparison\n",
        "    else: # Use pre-calculated distances if provided\n",
        "        count = np.sum(distances <= radius)\n",
        "    return count\n",
        "\n",
        "def calculate_global_entropy(cities, unvisited_cities, grid_resolution=None, use_weighted_entropy=False):\n",
        "    # Optimization: Use bounding box for grid dimensions\n",
        "    min_x = min(city.x for city in cities)\n",
        "    min_y = min(city.y for city in cities)\n",
        "    width = max(city.x for city in cities) - min_x\n",
        "    height = max(city.y for city in cities) - min_y\n",
        "\n",
        "    # Adaptive grid resolution based on city distribution\n",
        "    k = 5  # Number of nearest neighbors to consider\n",
        "    distances = cdist([[city.x, city.y] for city in unvisited_cities], [[city.x, city.y] for city in unvisited_cities])\n",
        "    np.fill_diagonal(distances, np.inf)\n",
        "    mean_nearest_distance = np.mean(np.sort(distances)[:, :k])\n",
        "    grid_resolution = int(max(width, height) / mean_nearest_distance) + 1  # Adapt resolution\n",
        "\n",
        "    num_cells = grid_resolution\n",
        "    grid = np.zeros((num_cells, num_cells))\n",
        "    cell_width = width / num_cells\n",
        "    cell_height = height / num_cells\n",
        "\n",
        "    for city in unvisited_cities:\n",
        "        x = int((city.x - min_x) / cell_width)\n",
        "        y = int((city.y - min_y) / cell_height)\n",
        "        x = min(x, num_cells - 1)  # Ensure within bounds\n",
        "        y = min(y, num_cells - 1)\n",
        "\n",
        "        if use_weighted_entropy:\n",
        "            cell_center_x = x * cell_width + cell_width / 2 + min_x\n",
        "            cell_center_y = y * cell_height + cell_height / 2 + min_y\n",
        "            weight = 1 / (1 + euclidean_distance(city, City(cell_center_x, cell_center_y)))\n",
        "            grid[x, y] += weight\n",
        "        else:\n",
        "            grid[x, y] += 1\n",
        "\n",
        "    probabilities = grid[grid > 0] / len(unvisited_cities)\n",
        "    entropy = -np.sum(probabilities * np.log2(probabilities))\n",
        "    return entropy\n",
        "\n",
        "def calculate_directional_entropy(city, unvisited_cities, num_directions=4):\n",
        "    directional_entropies = [0.0] * num_directions\n",
        "    for other_city in unvisited_cities:\n",
        "        if other_city != city:\n",
        "            angle = math.atan2(other_city.y - city.y, other_city.x - city.x)\n",
        "            direction = int(angle / (2 * math.pi) * num_directions) % num_directions\n",
        "            directional_entropies[direction] += 1\n",
        "\n",
        "    probabilities = [count / len(unvisited_cities) for count in directional_entropies]\n",
        "    entropies = [-p * math.log2(p) if p > 0 else 0 for p in probabilities]\n",
        "    return entropies\n",
        "\n",
        "def euclidean_distance(city1, city2):\n",
        "    return math.sqrt((city1.x - city2.x)**2 + (city1.y - city2.y)**2)\n",
        "\n",
        "def path_length(path):\n",
        "    length = 0\n",
        "    for i in range(len(path) - 1):\n",
        "        length += euclidean_distance(path[i], path[i+1])\n",
        "    length += euclidean_distance(path[-1], path[0])\n",
        "    return length\n",
        "\n",
        "def nearest_neighbor(cities):\n",
        "    num_cities = len(cities)\n",
        "    path = []\n",
        "    current_city = random.choice(cities)\n",
        "    current_city.visited = True\n",
        "    path.append(current_city)\n",
        "\n",
        "    for _ in range(num_cities - 1):\n",
        "        min_distance = float('inf')\n",
        "        next_city = None\n",
        "        for city in cities:\n",
        "            if not city.visited:\n",
        "                distance = euclidean_distance(current_city, city)\n",
        "                if distance < min_distance:\n",
        "                    min_distance = distance\n",
        "                    next_city = city\n",
        "\n",
        "        if next_city:\n",
        "            next_city.visited = True\n",
        "            path.append(next_city)\n",
        "            current_city = next_city\n",
        "    return path\n",
        "\n",
        "def two_opt(cities):\n",
        "  num_cities = len(cities)\n",
        "  path = cities.copy()\n",
        "  improved = True\n",
        "  while improved:\n",
        "    improved = False\n",
        "    for i in range(1, num_cities - 2):\n",
        "        for j in range(i + 1, num_cities):\n",
        "            if j - i == 1: continue  # Skip adjacent swaps\n",
        "            new_path = path[:i] + path[i:j][::-1] + path[j:]\n",
        "            if path_length(new_path) < path_length(path):\n",
        "                path = new_path\n",
        "                improved = True\n",
        "                break # Exit inner loop early if improvement found\n",
        "        if improved:\n",
        "            break # Exit outer loop early if improvement found\n",
        "  return path\n",
        "\n",
        "\n",
        "def adaptive_contract_bubble(city, stretch, bubble_sigma, density_radius, cities=None, influence_fields=None):\n",
        "    density = calculate_density(city, cities, density_radius)\n",
        "    adjusted_bubble_strength = bubble_sigma * (1 - density / len(cities))\n",
        "    influence_factor = 1.0\n",
        "    if influence_fields is not None:\n",
        "        influence_factor = influence_fields[city]\n",
        "    city.entropy = max(0, city.entropy - (0.1 + 0.05 * stretch) * adjusted_bubble_strength * influence_factor)\n",
        "\n",
        "def entropic_distance(city1, city2, stretch, initial_distances, global_entropy, directional_entropies):\n",
        "    initial_distance = initial_distances[(city1, city2)]\n",
        "    entropy_factor = 1 / (city1.entropy * city2.entropy + 1e-10) # Added small constant to avoid division by zero\n",
        "\n",
        "    angle = math.atan2(city2.y - city1.y, city2.x - city1.x)\n",
        "    direction = int(angle / (2 * math.pi) * len(directional_entropies)) % len(directional_entropies)\n",
        "    directional_entropy_factor = 1 / (1 + directional_entropies[direction])\n",
        "\n",
        "    stretch_factor = 1 + 0.1 * stretch\n",
        "    global_entropy_weight = 1 + (global_entropy * 0.2)\n",
        "    return initial_distance * entropy_factor * stretch_factor / global_entropy_weight * directional_entropy_factor\n",
        "\n",
        "def traveling_salesperson_entropic_adaptive(cities, start_city, bubble_sigma, density_radius_base, grid_resolution):\n",
        "    path = []\n",
        "    current_city = start_city\n",
        "    current_city.visited = True\n",
        "    path.append(current_city)\n",
        "\n",
        "    unvisited_cities = [city for city in cities if city != current_city]\n",
        "    initial_entropies = calculate_initial_entropies(cities, density_radius_base)\n",
        "    for city, entropy in initial_entropies.items():\n",
        "        city.entropy = entropy\n",
        "\n",
        "    initial_distances = {}\n",
        "    for c1 in cities:\n",
        "        for c2 in cities:\n",
        "            initial_distances[(c1, c2)] = euclidean_distance(c1, c2)\n",
        "\n",
        "    influence_fields = defaultdict(lambda: 1.0)\n",
        "    total_stretch = 0\n",
        "\n",
        "    while unvisited_cities:\n",
        "        global_entropy = calculate_global_entropy(cities, unvisited_cities)\n",
        "        directional_entropies = calculate_directional_entropy(current_city, unvisited_cities)\n",
        "\n",
        "        distances = {city: entropic_distance(current_city, city, total_stretch, initial_distances, global_entropy, directional_entropies) for city in unvisited_cities}\n",
        "        nearest_cities = sorted(distances, key=distances.get)\n",
        "        next_city = nearest_cities[0]\n",
        "\n",
        "        next_city.visited = True\n",
        "        path.append(next_city)\n",
        "        unvisited_cities.remove(next_city)\n",
        "\n",
        "        adaptive_contract_bubble(next_city, total_stretch, bubble_sigma, density_radius_base, cities=cities, influence_fields=influence_fields)\n",
        "        current_city = next_city\n",
        "\n",
        "    path_length_val = path_length(path)\n",
        "    for city in cities:\n",
        "        city.visited = False # Reset visited status\n",
        "    return path, path_length_val\n",
        "\n",
        "def traveling_salesperson_entropic_brute_start(cities, initial_params=(0.5, 20, 12)):\n",
        "    best_path = None\n",
        "    min_length = float('inf')\n",
        "\n",
        "    for start_city in cities:\n",
        "        path, length = traveling_salesperson_entropic_adaptive(cities.copy(), start_city, *initial_params)\n",
        "        if length < min_length:\n",
        "            min_length = length\n",
        "            best_path = path.copy()\n",
        "\n",
        "    return best_path\n",
        "\n",
        "def reset_cities(cities):\n",
        "    for city in cities:\n",
        "        city.visited = False\n",
        "        city.entropy = 1.0\n",
        "\n",
        "def read_tsp_file(filepath):\n",
        "    cities = []\n",
        "    reading_coords = False\n",
        "    with open(filepath, 'r') as f:\n",
        "        for line in f:\n",
        "            if line.strip().startswith(\"NODE_COORD_SECTION\"):\n",
        "                reading_coords = True\n",
        "                continue\n",
        "            elif line.strip().startswith(\"EOF\") or line.strip().startswith(\"DISPLAY_DATA_SECTION\"):\n",
        "                reading_coords = False\n",
        "            elif reading_coords and line.strip() and not line.strip().startswith(\"EOF\"):\n",
        "                parts = line.split()\n",
        "                try:\n",
        "                    x = float(parts[1])\n",
        "                    y = float(parts[2])\n",
        "                    cities.append(City(x, y)) # City name not used, so simplified\n",
        "                except (ValueError, IndexError):\n",
        "                    print(f\"Skipping invalid line: {line.strip()}\")\n",
        "\n",
        "    return cities\n",
        "\n",
        "def test_all_tsp_files(directory=\"Instances\"):\n",
        "    results = {}\n",
        "    for filename in os.listdir(directory):\n",
        "        if filename.endswith(\".tsp\"):\n",
        "            filepath = os.path.join(directory, filename)\n",
        "            print(f\"Testing {filename}...\")\n",
        "            cities = read_tsp_file(filepath)\n",
        "\n",
        "            results[filename] = {}\n",
        "\n",
        "            start_time = time.time()\n",
        "            path = traveling_salesperson_entropic_brute_start(cities.copy())\n",
        "            length = path_length(path)\n",
        "            results[filename][\"entropic\"] = {\"length\": length, \"time\": time.time() - start_time}\n",
        "\n",
        "\n",
        "            start_time = time.time()\n",
        "            reset_cities(cities)\n",
        "            path = nearest_neighbor(cities.copy())\n",
        "            results[filename][\"nearest_neighbor\"] = {\"length\": path_length(path), \"time\": time.time() - start_time}\n",
        "\n",
        "\n",
        "            start_time = time.time()\n",
        "            reset_cities(cities)\n",
        "            path = two_opt(cities.copy())\n",
        "            results[filename][\"two_opt\"] = {\"length\": path_length(path), \"time\": time.time() - start_time}\n",
        "\n",
        "            for algorithm in [\"entropic\", \"nearest_neighbor\", \"two_opt\"]:\n",
        "                print(f\"    {algorithm}: Length = {results[filename][algorithm]['length']}, Time = {results[filename][algorithm]['time']:.2f}s\")\n",
        "\n",
        "    return results\n",
        "\n",
        "results = test_all_tsp_files()\n",
        "\n",
        "for filename, algorithms in results.items():\n",
        "    print(f\"\\nSummary for {filename}:\")\n",
        "    for algorithm, data in algorithms.items():\n",
        "        print(f\"    {algorithm}: Length = {data['length']}, Time = {data['time']:.2f}s\")"
      ]
    }
  ]
}